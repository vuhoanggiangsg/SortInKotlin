fun swap(arr: Array<Int>, i: Int, j: Int) {
    val temp = arr[i]
    arr[i] = arr[j]
    arr[j] = temp
}

fun partition(arr: Array<Int>, low: Int, high: Int): Int {
    val pivot = arr[high] // pivot element
    var i = low - 1 // index of smaller element

    for (j in low until high) {
        // If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {
            i++ // increment index of smaller element
            swap(arr, i, j)
        }
    }
    swap(arr, i + 1, high)
    return i + 1
}

fun quickSort(arr: Array<Int>, low: Int, high: Int) {
    if (low < high) {
        // pi is partitioning index, arr[pi] is now at right place
        val pi = partition(arr, low, high)

        // Separately sort elements before partition and after partition
        quickSort(arr, low, pi - 1)
        quickSort(arr, pi + 1, high)
    }
}

fun printArray(arr: Array<Int>) {
    for (element in arr) {
        print("$element ")
    }
    println()
}

fun main() {
    val arr = arrayOf(10, 7, 8, 9, 1, 5)
    val n = arr.size
    quickSort(arr, 0, n - 1)
    println("Sorted array:")
    printArray(arr)
}
